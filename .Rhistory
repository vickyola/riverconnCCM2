i= 2
dams <- x[i,]
#str(dams)
rivershape <- shape_river_line
#dams <- dams
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), col="red", pch =19, add=TRUE)
plot(st_geometry(endnf),add=TRUE, col="green")
plot(st_geometry(startnf),add=TRUE, col="pink")
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
dams_p <- dams_p[which.min(st_distance(nf,dams_p)),]
plot(st_geometry(dams_p), col="cyan", pch =19, add=TRUE)
st_geometry(dams) <- st_geometry(dams_p)
plot(st_geometry(dams), col="blue", pch =19, add=TRUE)
buff <- st_buffer(dams,50)  %>%  st_as_sf
plot(st_geometry(buff), col="yellow", pch =19,add=TRUE)
#integrate dam in segment as node
nf.splits <- st_split(nf, buff) %>%  st_cast() %>% mutate(LENGTH= as.integer( st_length(.))) %>%  subset(. , LENGTH > 110 )
str(nf.splits)
plot(st_geometry(nf.splits),add=TRUE, col="brown1")
plot(st_geometry(nf.splits),add=TRUE, col="cyan")
plot(st_geometry((nf.splits[1,])),add=TRUE, col="green")
plot(st_geometry((nf.splits[2,])),add=TRUE, col="deeppink")
connected <- st_connect(dams, nf.splits[1,])
str(connected)
plot((connected),add=TRUE, col="coral")
plot(st_geometry(nf))
plot((connected),add=TRUE, col="coral")
connected <- st_connect(nf.splits[1,],dams)
str(connected)
plot((connected),add=TRUE, col="coral")
str(nf.splits)
plot(st_geometry(nf.splits),add=TRUE, col="cyan")
plot(st_geometry((nf.splits[1,])),add=TRUE, col="green")
plot(st_geometry((nf.splits[2,])),add=TRUE, col="deeppink")
?st_connect
connected <- st_connect(damsnf.splits[1,])
plot((connected),add=TRUE, col="coral")
str(st_union(nf.splits))
str(st_combine(nf.splits))
library("rgdal")
library("tidyverse")
library("rgdal")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
libPaths()
library(tidyverse)
install.packages("riverconn")
prefix=/usr/local/Cellar/proj/7.0.0
install.packages("riverconn")
library("rgdal")
install.packages("riverconn")
library("riverconn")
library("tidyverse")
library("sf")
library("raster")
library("ggspatial")
library("viridis")
library("igraph")
library("riverconn")
library("elevatr")
install.packages("elevatr")
library("elevatr")
library("gridExtra")
library("lwgeom")
library("gridExtra")
library("RANN")
library("cowplot")
library("data.table")
library("rgeos")
install.packages("rgeos")
library("rgeos")
library("rgeos")
install.packages("rgeos")
library("rgeos")
path <- paste0("/home/vicky/Documents/phd/dammedfish/River_data/LAEA/")
dir.exists(path)
window <- "2004"
dbname <- paste0("LAEA_W",window,".gdb")
dir.exists(paste0(path,dbname)) #check path
ogrListLayers(paste0(path,dbname))
seaout <- st_read(paste0(path,dbname), layer = "SEAOUTLETS" )
segments  <- st_read(paste0(path,dbname), layer = "RIVERSEGMENTS" )
node <- st_read(paste0(path,dbname), layer = "RIVERNODES" )
#Barriers
amberpath <-  "/home/vicky/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
file.exists(amberpath) #check path
amber <- fread(amberpath)
dam_in <- st_as_sf(amber, coords = c("Longitude_WGS84","Latitude_WGS84"))
st_crs(dam_in) <- "+proj=longlat +datum=WGS84"
str(dam_in)
names(dam_in)
##for some segments no River name is available
#WSO_ID unique identifier
seaout_df <- seaout %>% as.data.frame()
##in some cases there where no segments/basins to the WSO_ID of Rivers (Rivers with no Seaoutlet?)
##Example "Oude Rijn" in 2003
unique(seaout_df$NAME)
basin_id <- unique(na.omit(seaout_df[seaout_df$NAME == basinname,]$WSO_ID)) #WSO_ID River Basin ID
#for fictional example
basin_id <- 446812
#Basin
basn <- seaout[seaout$WSO_ID== basin_id, ] #SEAOUTLETS
#Segments
riv <- segments[segments$WSO_ID== basin_id,] #RIVERSEGMENTS
#Nodes
nodes <- node[node$WSO_ID== basin_id, ] #RIVERNODES
#Match crs
#Basin
shape_basin <- st_transform(basn,st_crs(dam_in))
#Segments
shape_river <- st_transform(riv,st_crs(dam_in))
#Confluences
river_joins <- st_transform(nodes,st_crs(dam_in))#for elevation at node compare with segments!
#Select dams in basin and in Buffer area
##TODO there is a faster way!
dam <- st_intersection(dam_in, st_buffer(shape_basin,1)) #crop dams with basin and a buffer of 1
# # ##plot input
plot(st_geometry(shape_basin))
plot(st_geometry(shape_river),add =TRUE)
plot(st_geometry(river_joins),add =TRUE, col="red")
dam <- dam_in[1,]
# #2.1 Shapefile Preprocessing  ##kann man kürzen
##################################################################################
#rename attributes
shape_river$UP_CELLS = shape_river$CONT_PIXELS# UP_CELLS The number of accumulated cells is a proxy of the upstream catchment area.
shape_river$alt = shape_river$ALT_GRADIENT
st_geometry(shape_river) <- "geometry"
shape_river_simple <- shape_river %>%
st_as_sf %>%
st_union()
shape_river_line <- shape_river %>% st_cast(.,"LINESTRING" ) %>%
mutate(id = WSO1_ID)  # 1:nrow(.)
getwd()
source("functions/dam_snap_ccm.R")
source("functions/dam_include.R")
source("functions/edges_list.R")
#2.3 Dams preprocessing  ##TODO kürzen
##################################################################################
#dams
dams_to_points <- dam %>% mutate(id = GUID) %>% dplyr::select(id)
x <-dams_to_points
str(x)
#str(dams_snapped)
##################################################################################
# #no parallel
snapped <- list()
for (i in 1:nrow(x)) {
snapped[[i]] <- dam_snap_ccm(x[i,],shape_river_line) #optional change here max dist.
cat(paste0(i, " "))
}
dams_snapped  <- do.call(rbind, snapped)
str(dams_snapped)
plot(st_geometry(dams_snapped),add =TRUE, col= "green")
snapped[[i]] <- dam_snap_ccm(x[i,],shape_river_line, max_dist = inf) #optional change here max dist.
#str(dams_snapped)
##################################################################################
# #no parallel
snapped <- list()
for (i in 1:nrow(x)) {
snapped[[i]] <- dam_snap_ccm(x[i,],shape_river_line, max_dist = Inf) #optional change here max dist.
cat(paste0(i, " "))
}
dams_snapped  <- do.call(rbind, snapped)
str(dams_snapped)
plot(st_geometry(dams_snapped),add =TRUE, col= "green")
x <-dams_to_points
#  max_dist=9000
i= 1
dams <- x[i,]
#rivershape <- shape_river_line
lines <- rivershape %>% st_as_sf()
rivershape <- shape_river_line
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
rivershape <- shape_river_line
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), col="red", add=TRUE)
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
names(rivershape)
print(rivershape$WSO1_ID)
plot(st_geometry(rivershape[rivershape$WSO1_ID=531606,]))
plot(st_geometry(rivershape[rivershape$WSO1_ID==531606,]))
plot(st_geometry(rivershape))
plot(st_geometry(rivershape[rivershape$WSO1_ID==531606,]), add=TRUE, col="red")
mitte <- rivershape[rivershape$WSO1_ID==531606,] %>% st_cast("POINTS")
plot(st_geometry(mitte), add=TRUE, col="red")
mitte <- rivershape[rivershape$WSO1_ID==531606,] %>% st_cast("POINTS")
mitte <- rivershape[rivershape$WSO1_ID==531606,] %>% st_cast("POINT")
plot(st_geometry(mitte), add=TRUE, col="red")
str(mitte)
str(mitte[2,])
str(mitte[length(mitte)/2,])
plot(st_geometry(mitte), add=TRUE, col="green")
mittep <- mitte[length(mitte)/2,]
plot(st_geometry(mitte), add=TRUE, col="red")
mittep <- mitte[length(mitte)/2,]
plot(st_geometry(mittep), add=TRUE, col="green")
st_geometry(x) <- st_geometry(mittep)
#x <-dams_to_points
str(x)
st_distance(x,shape_river_simple ) %>% sum
dams_snapped <- x #toy example test
plot(st_geometry(shape_river_line))
plot(st_geometry(x),add =TRUE, col= "red")
plot(st_geometry(dams_snapped),add =TRUE, col= "green")
str(dams_snapped)
# Retain dams that were snapped
dams_snapped_reduced <-
dams_snapped[st_contains(shape_river_simple %>% st_sf(), dams_snapped, prepared = FALSE)[[1]],]
str(dams_snapped_reduced)
plot(st_geometry(dams_snapped_reduced))#,add =TRUE, col= "blue")
#check:
st_distance(dams_snapped,shape_river_simple ) %>% sum
st_distance(x,shape_river_simple ) %>% sum
##dobblesnap
dams_snapped_reduced_joined <- dams_snapped_reduced %>%
mutate(cluster =
st_equals(dams_snapped_reduced, dams_snapped_reduced) %>%
sapply(., FUN = function(x) paste0(x, collapse = "_"))) %>%
group_by(cluster) %>%
slice(1) %>%
ungroup() %>%
mutate(id_dam = as.character(1:nrow(.)), pass_u = 0, pass_d = 0) %>%
as.data.frame %>%  st_as_sf()
# Create junction point shapefile
network_links <- rbind(
dams_snapped_reduced_joined %>%
mutate(type = "dam", id_barrier = id_dam) %>%
dplyr::select(type, id_barrier, pass_u, pass_d),
river_joins %>%
dplyr::select(ID) %>%
mutate(pass_u = NA, pass_d = NA, type = "joint") %>%
rename(id_barrier = ID, geometry = SHAPE)) %>% ##enter here name of geometry column
mutate(id_links = 1:nrow(.))
#2.5 Adding additional attributes and rename geometry column if necessary
##################################################################################
# #Elevation
##alt = ALT_GRADIENT
#str(shape_river_line)
river_net_simplified <- shape_river_line  %>%
mutate(EdgeID = as.character(WSO1_ID) )  #as.character
#'
#' @param river_net_simplified a polygon shapefile LINESTRING with EdgeID, FROMNODE, TONODe attributes
#' (must be of class sf)
#'
#' @return river_net_simplified with new segments
#'
#' @export
#'
#' @examples
#'
dam_include <- function(networklinks,rivernetwork){
links <- networklinks
segments <- rivernetwork
dams  <-links[links$type=="dam",]
#new Segments
for (i in 1:nrow(dams)){
ndam <- dams[i,]
seg <- segments[st_nearest_feature(ndam, segments), ] #%>%  st_combine()
#plot(st_geometry(seg))
newsegs <- lwgeom::st_split(seg,ndam) %>%
st_collection_extract(.,"LINESTRING") %>%
mutate(LENGTH= as.integer( st_length(.)))
#  plot(st_geometry(newsegs[1,] ), add= TRUE, col = "blue")
# plot(st_geometry(newsegs[2,] ), add= TRUE, col = "green")
##TODO more attributes
bindnewsegs <-rbind( newsegs[1,] %>%
mutate(TONODE = as.integer(ndam$id_barrier ), EdgeID =as.character(paste0(EdgeID,"_1"))),
newsegs[2,] %>%
mutate(FROMNODE = as.integer(ndam$id_barrier ), EdgeID =as.character(paste0(EdgeID,"_2"))))
segments <- rbind(bindnewsegs, segments)  %>%  filter(EdgeID != seg$EdgeID )
}
return(segments)
}
edges_list<- function(networklinks,rivernetwork){
links <- networklinks
segments <- rivernetwork
#Connections Links
dirlist <- list()#edges
for (i in unique(links$id_barrier)){
dirlist[[i]] <- data.frame(
"from" =  segments$EdgeID[segments$TONODE == i ][1] ,
"from2" =  segments$EdgeID[segments$TONODE == i][2] ,
"from3" =  segments$EdgeID[segments$TONODE == i][3] ,
"from4" =  segments$EdgeID[segments$TONODE == i][4] ,
"to" =   segments$EdgeID[segments$FROMNODE ==i][1],
##problem Jordan dead end node in multiple segments a TONODE value but never FROMNODE
#rotine if length(segments$EdgeID[segments$FROMNODE == i]) == 0
#dead sea!!
# moth node has no downstream segment
"to2" =   segments$EdgeID[segments$FROMNODE ==i][2],
"to3" =   segments$EdgeID[segments$FROMNODE ==i][3],
"to4" =   segments$EdgeID[segments$FROMNODE ==i][4],
"type" = links$type[links$id_barrier == i ],
"id_links" = links$id_links[links$id_barrier == i ],
"id_barrier" = i ,
"pass_u" = links$pass_u[links$id_barrier == i ],
"pass_d" = links$pass_d[links$id_barrier == i ]
)
}
#clean it
dirdf <- do.call(rbind, dirlist) %>%  st_drop_geometry( )
dirdfclean <- rbind( dirdf %>% dplyr::select(-from2, -from3, -from4, -to2, -to3, -to4, from , to),
dirdf %>% dplyr::select(-from, -from3, -from4, -to2, -to3, -to4, from2, to) %>%
rename(from = from2),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to2, -to3, -to4,  from3, to ) %>%
rename(from = from3),
dirdf %>% dplyr::select(-from, -from2, -from3, -to2, -to3, -to4, from4, to) %>%
rename(from = from4), ##
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to3, -to4, from , to2) %>%
rename( to = to2),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to3, -to4, from2, to2) %>%
rename(from = from2, to = to2),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to3, -to4,   from3, to2 ) %>%
rename(from = from3, to = to2),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to3, -to4, from4, to2) %>%
rename(from = from4, to = to2),
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to2, -to4, from , to3) %>%
rename( to = to3),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to2, -to4, from2, to3) %>%
rename(from = from2, to = to3),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to2, -to4,   from3, to3 ) %>%
rename(from = from3, to = to3),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to2, -to4, from4, to3) %>%
rename(from = from4, to = to3),
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to3, -to2, from , to4) %>%
rename( to = to4),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to3, -to2, from2, to4) %>%
rename(from = from2, to = to4),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to3, -to2,   from3, to4 ) %>%
rename(from = from3, to = to4),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to3, -to2, from4, to4) %>%
rename(from = from4, to = to4)
)
dfreturn <- dirdfclean[!(is.na(dirdfclean$to)) & !(is.na(dirdfclean$from)), ] ##include in pipe
#maybe remove !(is.na(dirdfclean$to))
return(dfreturn)
}
river_net_sliced <- dam_include(network_links, river_net_simplified)
edgedf <-edges_list(network_links,river_net_sliced)
head(river_net_sliced)
head(network_links)
head(river_net_sliced)
edgedf <-edges_list(network_links,river_net_sliced)
head(river_net_sliced)
edges_list<- function(networklinks,rivernetwork){
links <- networklinks
segments <- rivernetwork
#Connections Links
dirlist <- list()#edges
for (i in unique(links$id_barrier)){
dirlist[[i]] <- data.frame(
"from" =  segments$EdgeID[segments$TONODE == i ][1] ,
"from2" =  segments$EdgeID[segments$TONODE == i][2] ,
"from3" =  segments$EdgeID[segments$TONODE == i][3] ,
"from4" =  segments$EdgeID[segments$TONODE == i][4] ,
"to" =   segments$EdgeID[segments$FROMNODE ==i][1],
##problem Jordan dead end node in multiple segments a TONODE value but never FROMNODE
#rotine if length(segments$EdgeID[segments$FROMNODE == i]) == 0
#dead sea!!
# moth node has no downstream segment
"to2" =   segments$EdgeID[segments$FROMNODE ==i][2],
"to3" =   segments$EdgeID[segments$FROMNODE ==i][3],
"to4" =   segments$EdgeID[segments$FROMNODE ==i][4],
"type" = links$type[links$id_barrier == i ],
"id_links" = links$id_links[links$id_barrier == i ],
"id_barrier" = i ,
"pass_u" = links$pass_u[links$id_barrier == i ],
"pass_d" = links$pass_d[links$id_barrier == i ]
)
}
#clean it
dirdf <- do.call(rbind, dirlist) #%>%  st_drop_geometry( )
dirdfclean <- rbind( dirdf %>% dplyr::select(-from2, -from3, -from4, -to2, -to3, -to4, from , to),
dirdf %>% dplyr::select(-from, -from3, -from4, -to2, -to3, -to4, from2, to) %>%
rename(from = from2),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to2, -to3, -to4,  from3, to ) %>%
rename(from = from3),
dirdf %>% dplyr::select(-from, -from2, -from3, -to2, -to3, -to4, from4, to) %>%
rename(from = from4), ##
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to3, -to4, from , to2) %>%
rename( to = to2),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to3, -to4, from2, to2) %>%
rename(from = from2, to = to2),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to3, -to4,   from3, to2 ) %>%
rename(from = from3, to = to2),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to3, -to4, from4, to2) %>%
rename(from = from4, to = to2),
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to2, -to4, from , to3) %>%
rename( to = to3),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to2, -to4, from2, to3) %>%
rename(from = from2, to = to3),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to2, -to4,   from3, to3 ) %>%
rename(from = from3, to = to3),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to2, -to4, from4, to3) %>%
rename(from = from4, to = to3),
dirdf %>% dplyr::select(-from2, -from3, -from4, -to, -to3, -to2, from , to4) %>%
rename( to = to4),
dirdf %>% dplyr::select(-from, -from3, -from4, -to, -to3, -to2, from2, to4) %>%
rename(from = from2, to = to4),
dirdf %>% dplyr::select(-from ,-from2,  -from4, -to,-to3, -to2,   from3, to4 ) %>%
rename(from = from3, to = to4),
dirdf %>% dplyr::select(-from, -from2, -from3, -to, -to3, -to2, from4, to4) %>%
rename(from = from4, to = to4)
)
dfreturn <- dirdfclean[!(is.na(dirdfclean$to)) & !(is.na(dirdfclean$from)), ] ##include in pipe
#maybe remove !(is.na(dirdfclean$to))
return(dfreturn)
}
edgedf <-edges_list(network_links,river_net_sliced)
head(edgedf)
edgedf
head(edgedf)
vertices <- river_net_sliced %>%
st_drop_geometry %>%
rename(name = EdgeID) %>%
mutate(across(c(everything()), as.character))  %>% #, -geom
mutate(length = as.numeric(SHAPE_Length), alt = as.numeric(alt)) %>% dplyr::select(name, everything())%>%
mutate(Conname = as.character(1:nrow(.)))  #as.character
##################################################################################
river_graph <- graph_from_data_frame(
d = edgedf,
directed = TRUE,
v = vertices)
# check river_graph edges
igraph::get.edge.attribute(river_graph) %>% names
# check river_graph vertices
igraph::get.vertex.attribute(river_graph) %>% names
## [1] "name"     "length"   "ARCID"    "UP_CELLS" "alt"
g2 = river_graph
l = c("MAINDRAIN_ID","LENGTH","CUM_LEN","PIXELS_100M","CATCHMENT_AREA","CONT_PIXELS","DRAIN_KM2","BURNED","CONFIDENCE","WINDOW" , "SHAPE_Length"  )
for (i in l){
g2<-delete_vertex_attr(g2, i)
}
#igraph::get.vertex.attribute(g2) %>% names
river_graph<-g2
##3.1 Editing the igraph object
##################################################################################
# update length attribute
#V(river_graph)$length <- V(river_graph)$length / 10000
hist(V(river_graph)$length)##TODO checken welche length
# Function for organism that prefers high elevation
suit_fun_high <- function(x){dnorm(x, mean = 1500, sd = 500)*410*sqrt(3*pi)}
# Function for organism that prefers low elevation
suit_fun_low <- function(x){exp(- 0.001*x)}
# Calculate HSI for the igraph nodes
V(river_graph)$HSI_low <- suit_fun_low(V(river_graph)$alt)
V(river_graph)$HSI_high <- suit_fun_high(V(river_graph)$alt)
# Calculate weighted usable length for igraph nodes
V(river_graph)$WUL_low <- V(river_graph)$HSI_low * V(river_graph)$length
V(river_graph)$WUL_high <- V(river_graph)$HSI_high * V(river_graph)$length
# Plot the two response functions
1:10:2500 %>%
data.frame("Elevation" = .,
"Low" = suit_fun_low(.),
"High" = suit_fun_high(.)) %>%
pivot_longer(c("Low", "High"),
names_to = "Type", values_to = "HSI") %>%
ggplot() +
geom_line(aes(x = Elevation, y = HSI, color = Type))+
theme_bw()
#3.2 Plotting the igraph object
##################################################################################
#here
#names(river_net_sliced)
# Extract reaches centroids
river_net_simplified_centroids <- river_net_sliced %>% #  mutate(.,geometry = x) %>%
st_as_sf() %>% #st_transform(st_crs("+proj=longlat +datum=WGS84")) %>%
st_centroid()
# get the centroids coordinates
coordinates <- river_net_simplified_centroids %>% # %>%
dplyr::mutate(lon = sf::st_coordinates(.)[,1], lat = sf::st_coordinates(.)[,2]) %>%
dplyr::select(lat, lon) %>%
st_set_geometry( NULL)
# give postion as x , y to nodes (this is what ggnetwork does)
V(river_graph)$lat <- coordinates$lat
V(river_graph)$lon <- coordinates$lon
edges_for_plot <- edgedf %>%
inner_join(as_data_frame(river_graph, what = "vertices") %>% dplyr::select(name, lon, lat), by = c('from' = 'name')) %>%
rename(x = lon, y = lat) %>%
inner_join(as_data_frame(river_graph, what = "vertices") %>% dplyr::select(name, lon, lat), by = c('to' = 'name')) %>%
rename(xend = lon, yend = lat)
##############
#läuft
ggplot() + geom_sf(data =river_net_sliced)+
geom_curve(aes(x = x, y = y, xend = xend, yend = yend),
data = edges_for_plot, curvature = 0.1,
alpha = 0.5, position = "identity")
###########
#läuft net weils irgendwie die coordinaten zersägt
gg0 <- ggnetwork(river_graph, layout = coordinates %>% as.matrix(), scale = FALSE)
catch_dci <-  index_calculation(graph = river_graph,
weight = "length",
B_ij_flag = FALSE,
index_type = "full",
index_mode = "from")
catch_dci
catch_dci_asym <- index_calculation(graph = river_graph,
weight = "length",
B_ij_flag = FALSE,
dir_fragmentation_type = "asymmetric",
index_type = "full",
index_mode = "from")
catch_dci_asym
