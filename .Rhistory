library("rgdal")
library("tidyverse")
library("sf")
library("raster")
library("ggspatial")
library("viridis")
library("igraph")
library("riverconn")
library("elevatr")
library("gridExtra")
library("ggnetwork")
#remotes::install_github("briatte/ggnetwork") ##install from github ! fixed some bugs 6 for plotting!
library("lwgeom")
library("gridExtra")
#library("corrmorant")  ##version problem try to make virt env with R version under which riverconn was writen
library("RANN")
library("ggpubr")
library("cowplot")
library("data.table")
library("rgeos")
#install.packages("remotes")
#remotes::install_github("michaeldorman/nngeo")
#for parallel
library("foreach")
library("doParallel")
#check packages list.functions.in.file()
#window <- "2004"
#path <- paste0("C:/Users/Nutzer/Documents/phd/dammedfish/River_data/CCM/CCM21_LAEA_window",window,"/ccm21/")
#C:\Users\Vicky\Documents\phd\CCM2
path <- paste0("C:/Users/Vicky/Documents/phd/CCM2/")
dbname <- "WGS84_W2003.gdb"
dir.exists(paste0(path,dbname)) #check path
ogrListLayers(paste0(path,dbname))
seaout <- st_read(paste0(path,dbname), layer = "SEAOUTLETS" )
segments  <- st_read(paste0(path,dbname), layer = "RIVERSEGMENTS" )
node <- st_read(paste0(path,dbname), layer = "RIVERNODES" )
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Nutzer/Documents/phd/"
ile.exists(amberpath) #check path
file.exists(amberpath) #check path
dir.exists(amberpath) #check path
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Nutzer/Documents/phd/"
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Vicky/Documents/phd/"
dir.exists(amberpath) #check path
amber <- fread(amberpath)
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Vicky/Documents/phd/Amber"
dir.exists(amberpath) #check path
amber <- fread(amberpath)
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Vicky/Documents/phd/Amber/"
dir.exists(amberpath) #check path
#Barriers
#amberpath <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/AMBER/atlas.csv"
amberpath <-  "C:/Users/Vicky/Documents/phd/Amber/atlas.csv"
file.exists(amberpath) #check path
amber <- fread(amberpath)
dam_in <- st_as_sf(amber, coords = c("Longitude_WGS84","Latitude_WGS84"))
st_crs(dam_in) <- "+proj=longlat +datum=WGS84"
##for some segments no River name is available
#WSO_ID unique identifier
seaout_df <- seaout %>% as.data.frame()
##in some cases there where no segments/basins to the WSO_ID of Rivers (Rivers with no Seaoutlet?)
##Example "Oude Rijn" in 2003
unique(seaout_df$NAME)
basinname <- "Seudre"
basin_id <- unique(na.omit(seaout_df[seaout_df$NAME == basinname,]$WSO_ID)) #WSO_ID River Basin ID
#Basin
basn <- seaout[seaout$WSO_ID== basin_id, ] #SEAOUTLETS
#Segments
riv <- segments[segments$WSO_ID== basin_id,] #RIVERSEGMENTS
#Nodes
nodes <- node[node$WSO_ID== basin_id, ] #RIVERNODES
#Match crs
#Basin
shape_basin <- st_transform(basn,st_crs(dam_in))
#Segments
shape_river <- st_transform(riv,st_crs(dam_in))
#Confluences
river_joins <- st_transform(nodes,st_crs(dam_in))#for elevation at node compare with segments!
#Select dams in basin and in Buffer area
##TODO there is a faster way!
dam <- st_intersection(dam_in, st_buffer(shape_basin,1)) #crop dams with basin and a buffer of 1
# ##plot input
plot(st_geometry(shape_basin))
plot(st_geometry(shape_river),add =TRUE)
plot(st_geometry(river_joins),add =TRUE, col="red")
plot(st_geometry(dam),add =TRUE, col="green")
#2.1 Shapefile Preprocessing  ##kann man kürzen
##################################################################################
#rename attributes
shape_river$UP_CELLS = shape_river$CONT_PIXELS# UP_CELLS The number of accumulated cells is a proxy of the upstream catchment area.
#CONT_PIXELS Area upstream the From Node drained by the river segment in 100x100 grid cells
shape_river$alt = shape_river$ALT_GRADIENT
st_geometry(shape_river) <- "geometry"
shape_river_simple <- shape_river %>%
st_as_sf %>%
st_union()
str(shape_river_simple)
str8shape_river
str(shape_river)
length(shape_river)
dim(shape_river)
unique(shape_river$WSO1_ID )
length(unique(shape_river$WSO1_ID ))
str(shape_river)
length(unique(shape_river$NEXTDOWNID      ))
shape_river_line <- shape_river %>% st_cast(.,"LINESTRING" ) %>%
mutate(id = WSO1_ID)  #          1:nrow(.)
str(shape_river_line)
#2.3 Dams preprocessing  ##TODO kürzen
##################################################################################
#dams
dams_to_points <- dam %>% mutate(id = GUID) %>% dplyr::select(id)
i <-3  #237
dams <- x[i,]
x <-dams_to_points
#test
max_dist <- 1500
i <-3  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "chocolate",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
str(st_geometry(nf.lines))
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
#nearest point
dams_p <- st_nearest_points(dams, nf)%>%   st_cast("POINT") %>%  st_as_sf
dams_p <- dams_p[which.min(st_distance(nf,dams_p)),]
plot(st_geometry(dams_p), add =TRUE, col= "pink",  pch = 19)
nf.points.min <- nf.points[ which.min(st_distance(nf.points,dams)),]
st_geometry(dams) <- st_geometry(nf.points.min)
dams <- st_as_sf(dams)
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
i <-6  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "chocolate",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
#nearest point
dams_p <- st_nearest_points(dams, nf)%>%   st_cast("POINT") %>%  st_as_sf
dams_p <- dams_p[which.min(st_distance(nf,dams_p)),]
plot(st_geometry(dams_p), add =TRUE, col= "pink",  pch = 19)
nf.points.min <- nf.points[ which.min(st_distance(nf.points,dams)),]
st_geometry(dams) <- st_geometry(nf.points.min)
dams <- st_as_sf(dams)
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
?sf
split?
?split
?split
?st_segmentize
nf.segments <- nf %>%  st_as_sf %>% st_segmentize
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,10)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
i <-7  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
i <-17  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,5)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,10)
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
st_length(nf.lines)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,100)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
i <-19  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
st_length(nf.lines)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,    st_length(nf.lines)/10)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,    st_length(nf.lines)/10) %>%   st_cast("POINT")
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
nf.segments <- nf %>%  st_as_sf %>% st_segmentize(.,    st_length(nf.lines)/10) %>%   st_cast("POINT")
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize(., 100)# %>%   st_cast("POINT")
str(nf.segments)
nf.segments <- nf.lines %>% st_segmentize( 100)# %>%   st_cast("POINT")
str(nf.segments)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
?st_segmentize
st_length(nf.lines)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50)# %>%   st_cast("POINT")
str(nf.segments)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50) %>%   st_cast("POINT")
str(nf.segments)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 100) %>%   st_cast("POINT")
str(nf.segments)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 200) %>%   st_cast("POINT")
str(nf.segments)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50) %>%   st_cast("POINT")
str(nf.segments)
i <-25  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
st_length(nf.lines)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50) %>%   st_cast("POINT")
#st_length(nf.lines)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50) %>%   st_cast("POINT")
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
#plot(st_geometry(nf.lines), add =TRUE, col= "green",  pch = 8)
plot(st_geometry(nf.segments), add =TRUE, col= "orange",  pch = 8)
plot(st_geometry(nf.points), add =TRUE, col= "blue",  pch = 8)
#nearest point
dams_p <- st_nearest_points(dams, nf)%>%   st_cast("POINT") %>%  st_as_sf
dams_p <- dams_p[which.min(st_distance(nf,dams_p)),]
plot(st_geometry(dams_p), add =TRUE, col= "blue",  pch = 19)
nf.points.min <- nf.points[ which.min(st_distance(nf.points,dams)),]
st_geometry(dams) <- st_geometry(nf.points.min)
dams <- st_as_sf(dams)
plot(st_geometry(dams), add =TRUE, col= "violet",  pch = 19)
#nearest segmentized point
dams_s <- st_nearest_points(dams, nf.segments)%>%   st_cast("POINT") %>%  st_as_sf
dams_s <- dams_s[which.min(st_distance(nf,dams_s)),]
plot(st_geometry(dams_s), add =TRUE, col= "orange",  pch = 19)
#nearest segmentized point
dams_s <- st_nearest_points(dams_s, nf.segments)%>%   st_cast("POINT") %>%  st_as_sf
dams_s <- dams_s[which.min(st_distance(nf,dams_s)),]
plot(st_geometry(dams_s), add =TRUE, col= "orange",  pch = 19)
dams_s <- st_nearest_points(dams, nf.segments)%>%   st_cast("POINT") %>%  st_as_sf
dams_s <- dams_s[which.min(st_distance(nf,dams_s)),]
plot(st_geometry(dams_s), add =TRUE, col= "orange",  pch = 19)
nf.segments_min <- nf.segments[ which.min(st_distance(nf.segments,dams)),]
st_geometry(dams) <- st_geometry(nf.segments_min)
dams_s <- st_as_sf(dams)
plot(st_geometry(dams_s), add =TRUE, col= "violet",  pch = 19)
i <-25  #2
dams <- x[i,]
rivershape <- shape_river_line
dams <- dams %>%  st_as_sf %>%   st_cast("POINT")
lines <- rivershape %>% st_as_sf()
nf <- lines[st_nearest_feature(dams, lines), ]
plot(st_geometry(nf))
plot(st_geometry(dams), add =TRUE, col= "red",  pch = 19)
#nearest node
nf.points <- nf  %>%  st_as_sf %>%   st_cast("POINT")
nf.lines <- nf  %>%  st_as_sf %>%   st_cast("LINESTRING")
#st_length(nf.lines)
#str(nf.lines)
nf.segments <- nf.lines %>% st_segmentize( 50) %>%   st_cast("POINT")
#nearest segmentized point
nf.segments_min <- nf.segments[ which.min(st_distance(nf.segments,dams)),]
st_geometry(dams) <- st_geometry(nf.segments_min)
dams_s <- st_as_sf(dams)
plot(st_geometry(dams_s), add =TRUE, col= "violet",  pch = 19)
##################################################################################
#Speed up by parrallel processing
#change to your R lib location and change to location of function (snap function extern!)
.libPaths() #find lib path
#setup parallel backend to use many processors
cores=detectCores()
clusterEvalQ(cl, .libPaths("C:/Users/Vicky/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
#print(cores)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
clusterEvalQ(cl, .libPaths("C:/Users/Vicky/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
funpat <- "C:/Users/Nutzer/Documents/phd/dammedfish/River_data/" #path of function to run parallel
dir.exists(funpat)
funpat <- "functions/" #path of function to run parallel
output <- foreach(i=1:nrow(x), .combine = rbind,
.packages= c('dplyr', 'sf')) %dopar% {
source(paste0(funpat,"dam_snap_ccm.R")) # That is the main point. Source your Function File here.
temp <- dam_snap_ccm(x[i,],shape_river_line) # use your custom function after sourcing
temp
}
stopCluster(cl)
dams_snapped <- output
plot(st_geometry(shape_river_line))
plot(st_geometry(dams_snapped),add =TRUE, col= "red")
# Retain dams that were snapped
dams_snapped_reduced <-
dams_snapped[st_contains(shape_river_simple %>% st_sf(), dams_snapped, prepared = FALSE)[[1]],]
plot(st_geometry(dams_snapped_reduced),add =TRUE, col= "blue")
#2.3 Dams preprocessing  ##TODO kürzen
##################################################################################
#dams
dams_to_points <- dam %>% mutate(id = GUID) %>% dplyr::select(id)
x <-dams_to_points
##################################################################################
#Speed up by parrallel processing
#change to your R lib location and change to location of function (snap function extern!)
.libPaths() #find lib path
#setup parallel backend to use many processors
cores=detectCores()
#print(cores)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
# Loop
#clusterEvalQ(cl, .libPaths("C:/Users/Nutzer/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
clusterEvalQ(cl, .libPaths("C:/Users/Vicky/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
dir.exists(funpat)
output <- foreach(i=1:nrow(x), .combine = rbind,
.packages= c('dplyr', 'sf')) %dopar% {
source(paste0(funpat,"dam_snap_ccm.R")) # That is the main point. Source your Function File here.
temp <- dam_snap_ccm(x[i,],shape_river_line) # use your custom function after sourcing
temp
}
stopCluster(cl)
dams_snapped <- output
plot(st_geometry(shape_river_line))
plot(st_geometry(dams_snapped),add =TRUE, col= "red")
# Retain dams that were snapped
dams_snapped_reduced <-
dams_snapped[st_contains(shape_river_simple %>% st_sf(), dams_snapped, prepared = FALSE)[[1]],]
plot(st_geometry(dams_snapped_reduced),add =TRUE, col= "blue")
str(dams_snapped)
plot(st_geometry(shape_river_line))
plot(st_geometry(dams_snapped),add =TRUE, col= "red")
temp <- dam_snap_ccm(x[i,],shape_river_line, 90) # use your custom function after sourcing
#print(cores)
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
# Loop
#clusterEvalQ(cl, .libPaths("C:/Users/Nutzer/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
clusterEvalQ(cl, .libPaths("C:/Users/Vicky/AppData/Local/R/win-library/4.2" )) #Change  here your R library path
funpat <- "functions/" #path of function to run parallel
output <- foreach(i=1:nrow(x), .combine = rbind,
.packages= c('dplyr', 'sf')) %dopar% {
source(paste0(funpat,"dam_snap_ccm.R")) # That is the main point. Source your Function File here.
temp <- dam_snap_ccm(x[i,],shape_river_line, 90) # use your custom function after sourcing
temp
}
stopCluster(cl)
dams_snapped <- output
str(dams_snapped)
plot(st_geometry(shape_river_line))
plot(st_geometry(dams_snapped),add =TRUE, col= "red")
##dobblesnap
dams_snapped_reduced_joined <- dams_snapped_reduced %>%
mutate(cluster =
st_equals(dams_snapped_reduced, dams_snapped_reduced) %>%
sapply(., FUN = function(x) paste0(x, collapse = "_"))) %>%
group_by(cluster) %>%
slice(1) %>%
ungroup() %>%
mutate(id_dam = as.character(1:nrow(.)), pass_u = 0.1, pass_d = 0.8) %>%
as.data.frame %>%  st_as_sf()
# Retain dams that were snapped
dams_snapped_reduced <-
dams_snapped[st_contains(shape_river_simple %>% st_sf(), dams_snapped, prepared = FALSE)[[1]],]
plot(st_geometry(dams_snapped_reduced),add =TRUE, col= "blue")
#check:
st_distance(dams_snapped_reduced,shape_river_simple ) %>% sum
##dobblesnap
dams_snapped_reduced_joined <- dams_snapped_reduced %>%
mutate(cluster =
st_equals(dams_snapped_reduced, dams_snapped_reduced) %>%
sapply(., FUN = function(x) paste0(x, collapse = "_"))) %>%
group_by(cluster) %>%
slice(1) %>%
ungroup() %>%
mutate(id_dam = as.character(1:nrow(.)), pass_u = 0.1, pass_d = 0.8) %>%
as.data.frame %>%  st_as_sf()
#window <- "2004"
#path <- paste0("C:/Users/Nutzer/Documents/phd/dammedfish/River_data/CCM/CCM21_LAEA_window",window,"/ccm21/")
#C:\Users\Vicky\Documents\phd\CCM2
path <- paste0("C:/Users/Vicky/Documents/phd/CCM2/")
